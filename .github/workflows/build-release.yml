name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-macos-arm:
    name: Build macOS ARM Application
    runs-on: macos-latest  # ARM64 (Apple Silicon)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      
      - name: Install dependencies
        run: |
          uv sync
          uv pip install pyinstaller==6.3.0
      
      - name: Build with PyInstaller
        run: |
          uv run pyinstaller gui_app.spec
      
      - name: Create ZIP archive
        run: |
          cd dist
          zip -r HRSLinkageTool-macOS-ARM.zip HRSLinkageTool.app
      
      - name: Upload macOS ARM build artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm-build
          path: dist/HRSLinkageTool-macOS-ARM.zip
          retention-days: 5

  build-macos-intel:
    name: Build macOS Intel Application
    runs-on: macos-13  # Intel x86_64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      
      - name: Install dependencies
        run: |
          uv sync
          uv pip install pyinstaller==6.3.0
      
      - name: Build with PyInstaller
        run: |
          uv run pyinstaller gui_app.spec
      
      - name: Create ZIP archive
        run: |
          cd dist
          zip -r HRSLinkageTool-macOS-Intel.zip HRSLinkageTool.app
      
      - name: Upload macOS Intel build artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-build
          path: dist/HRSLinkageTool-macOS-Intel.zip
          retention-days: 5

  build-windows:
    name: Build Windows Application
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      
      - name: Install dependencies
        run: |
          uv sync
          uv pip install pyinstaller==6.3.0
      
      - name: Build with PyInstaller
        run: |
          uv run pyinstaller gui_app.spec
      
      - name: Create ZIP archive
        run: |
          cd dist
          Compress-Archive -Path HRSLinkageTool -DestinationPath HRSLinkageTool-Windows.zip
        shell: pwsh
      
      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/HRSLinkageTool-Windows.zip
          retention-days: 5

  create-release:
    name: Create GitHub Release
    needs: [build-macos-arm, build-macos-intel, build-windows]
    runs-on: ubuntu-latest
    outputs:
      release_data: ${{ steps.create_release.outputs.release_data }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download macOS ARM build
        uses: actions/download-artifact@v4
        with:
          name: macos-arm-build
          path: ./artifacts
      
      - name: Download macOS Intel build
        uses: actions/download-artifact@v4
        with:
          name: macos-intel-build
          path: ./artifacts
      
      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./artifacts
      
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/HRSLinkageTool-macOS-ARM.zip
            ./artifacts/HRSLinkageTool-macOS-Intel.zip
            ./artifacts/HRSLinkageTool-Windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-readme:
    name: Update README with Download Links
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      
      - name: Get latest release info
        id: release
        run: |
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          echo "release_data<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_DATA" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Update README with download links
        run: |
          python scripts/update_readme.py '${{ steps.release.outputs.release_data }}'
      
      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet README.md; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push updated README
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "docs: Update download links for release ${{ github.ref_name }}"
          git push

